{"version":3,"sources":["componenets/AppNavbar.js","actions/itemAction.js","actions/types.js","ShoppingList.js","reducers/itemReducer.js","reducers/index.js","store.js","componenets/ItemModal.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItem","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","initialState","loading","combineReducers","action","filter","middleware","thunk","composingMiddlewareAndDevTools","window","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","rootReducer","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","post","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0ddba0e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Collapse,Navbar,NavbarToggler,NavbarBrand,Nav,NavItem,NavLink,Container} from 'reactstrap';\n\nexport default class AppNavbar extends Component{\n\n        state ={\n            isOpen: false\n        };\n\n        toggle = () =>{\n          this.setState({\n           isOpen : !this.state.isOpen\n          });\n    };\n    render(){\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"/\">\n                            Shopping List\n                        </NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink href=\"hhtps://www.google.com\">\n                                        Google\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        );\n\n    }\n\n}\n","import axios from 'axios';\nimport {GET_ITEMS,ADD_ITEMS,DELETE_ITEMS,ITEMS_LOADING} from \"./types\";\n\nexport const getItem = () => dispatch =>{\n  dispatch(setItemsLoading);\n  axios\n      .get('./api/items')\n      .then(res =>\n          dispatch({\n              type: GET_ITEMS,\n              payload: res.data\n                  }))\n};\nexport const addItem = (item) => dispatch => {\n axios\n     .post('/api/items', item)\n     .then(res => dispatch({\n         type: ADD_ITEMS,\n         payload : res.data\n     }))\n};\nexport const deleteItem = (id) => dispatch => {\n   axios\n       .delete(`api/items/${id}`)\n       .then(res => dispatch ({\n           type: DELETE_ITEMS,\n           payload:id\n       }))\n};\n\nexport const setItemsLoading = () =>{\n    return {\n        type: ITEMS_LOADING\n    };\n};","export const GET_ITEMS ='GET_ITEM';\nexport const ADD_ITEMS ='ADD_ITEM';\nexport const DELETE_ITEMS ='DELETE_ITEM';\nexport const ITEMS_LOADING =\"ITEMS_LOADING\";","import React, {Component} from 'react';\nimport {Container, ListGroup, ListGroupItem, Button} from 'reactstrap';\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport {connect} from 'react-redux';\nimport {getItem,deleteItem} from \"./actions/itemAction\";\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n\n    componentDidMount() {\n        this.props.getItem();\n    }\n  onDeleteClick = (id) =>{\n    this.props.deleteItem(id);\n  };\n\n  render(){\n\n        const {items} = this.props.item;\n        return(\n            <Container>\n\n                <ListGroup>\n                    <TransitionGroup className={\"shopping-list\"}>\n                        {items.map(({_id,name}) => (\n                            <CSSTransition key={_id} timeout={500}>\n                                <ListGroupItem>\n                                    <Button className=\"remove-btn\" color =\"danger\" size=\"sm\"\n                                            onClick={this.onDeleteClick.bind(this,_id)}>&times;\n                                    </Button>\n\n\n                                    {name}</ListGroupItem>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n\n\n            );\n    }\n}\nShoppingList.propTypes = {\n    getItem: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired\n};\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\nexport  default connect (mapStateToProps,{getItem,deleteItem})(ShoppingList);","\nimport {GET_ITEMS, ADD_ITEMS,DELETE_ITEMS,ITEMS_LOADING} from \"../actions/types\";\n\nconst initialState = {\n    items:[],\n    loading:false\n};\n\nexport default function (state = initialState, action) {\n\n   switch (action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items : action.payload,\n                loading: false\n            };\n       case DELETE_ITEMS:\n           return {\n               ...state,\n               items: state.items.filter(item => item._id !== action.payload)\n           };\n       case ADD_ITEMS:\n           return {\n               ...state,\n               items: [action.payload, ...state.items]\n           };\n       case ITEMS_LOADING:\n           return {\n               ...state,\n               loading: true\n           };\n        default:\n            return state;\n    }\n\n}","import {combineReducers} from \"redux\";\nimport itemReducer from './itemReducer';\n\nexport default combineReducers(\n    {\n        item: itemReducer\n    }\n)","import {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst composeEnhancers =  typeof window === 'object' &&  window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\nconst composingMiddlewareAndDevTools = composeEnhancers(applyMiddleware(...middleware));\n\nconst store = createStore(rootReducer, initialState, composingMiddlewareAndDevTools);\n/*const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n\n    ));*/\nexport default store;","import React , {Component} from 'react';\nimport {Button, Modal, ModalHeader, ModalBody,Form,FormGroup,Label,Input} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {addItem} from '../actions/itemAction';\n\nclass ItemModal extends Component {\n    state = {\n        modal: false,\n        name: ''\n    };\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    };\n    onChange = (e) =>{\n        this.setState({[e.target.name]: e.target.value})\n    };\n    onSubmit = (e) => {\n          e.preventDefault();\n          const newItem = {\n              name: this.state.name\n          };\n        this.props.addItem(newItem);\n        this.toggle();\n\n    };\n    render (){\n        return (\n\n           <div>\n               <Button color=\"dark\"\n               style={{marginBottom:\"2rem\"}}\n               onClick={this.toggle}\n               >Add Item</Button>\n               <Modal isOpen={this.state.modal}\n               toggle={this.toggle}>\n                   <ModalHeader toggle={this.toggle}>\n                       Add to Shopping List\n                   </ModalHeader>\n                   <ModalBody>\n                       <Form onSubmit={this.onSubmit}>\n                           <FormGroup>\n                               <Label for=\"item\">Item</Label>\n                               <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add shopping Item\" onChange={this.onChange}/>\n                               <Button color=\"dark\" style={{marginTop:\"2rem\"}}>AddItem</Button>\n                           </FormGroup>\n                       </Form>\n                   </ModalBody>\n               </Modal>\n           </div>\n\n\n\n\n        );\n    }\n\n}\nconst MapStateToProps =state => ({\n    item: state.item\n\n});\nexport default connect(MapStateToProps,{addItem})(ItemModal);\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppNavbar from \"./componenets/AppNavbar\";\nimport ShoppingList from \"./ShoppingList\";\nimport {Provider} from 'react-redux';\nimport store from './store.js';\nimport {Container} from 'reactstrap';\nimport ItemModal from \"./componenets/ItemModal\";\n\nfunction App() {\n  return (\n      <Provider store={store}>\n    <div className=\"App\">\n      <AppNavbar />\n      <Container>\n      <ItemModal/>\n      <ShoppingList />\n      </Container>\n    </div>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    console.log(\"The process.en.PORT is :\", process.env.PUBLIC_URL);\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}